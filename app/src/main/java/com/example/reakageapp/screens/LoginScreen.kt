package com.example.reakageapp.screensimport android.net.Uriimport androidx.compose.foundation.Imageimport androidx.compose.foundation.layout.*import androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.text.input.PasswordVisualTransformationimport androidx.compose.ui.unit.dpimport androidx.navigation.NavControllerimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.unit.spimport com.example.reakageapp.theme.glassmorphismimport com.example.reakageapp.Rimport kotlinx.coroutines.launch@Composablefun LoginScreen(navController: NavController) {    var email by remember { mutableStateOf("") }    var password by remember { mutableStateOf("") }    var errorMessage by remember { mutableStateOf<String?>(null) }    val snackbarHostState = remember { SnackbarHostState() }    val coroutineScope = rememberCoroutineScope()    // Mock login credentials    val validCredentials = mapOf(        "john.doe@example.com" to "password123",        "jane.smith@example.com" to "pass456",        "mary.jones@example.com" to "pass789"    )    // Show snackbar when errorMessage changes    LaunchedEffect(errorMessage) {        errorMessage?.let {            coroutineScope.launch {                snackbarHostState.showSnackbar(it)                if (it == "Login successful") {                    navController.navigate("home") {                        popUpTo("login") { inclusive = true }                    }                }            }        }    }    fun validateLogin() {        if (email.isBlank() || password.isBlank()) {            errorMessage = "Please fill all fields"            return        }        if (validCredentials.containsKey(email) && validCredentials[email] == password) {            errorMessage = "Login successful"        } else {            errorMessage = "Invalid email or password"        }    }    Scaffold(        modifier = Modifier.fillMaxSize(),        snackbarHost = {            SnackbarHost(                hostState = snackbarHostState,                modifier = Modifier.padding(16.dp)            ) { data ->                Snackbar(                    modifier = Modifier.padding(8.dp),                    containerColor = Color(0xFF1565C0),                    contentColor = Color.White                ) {                    Text(                        text = data.visuals.message,                        style = MaterialTheme.typography.bodyMedium.copy(                            color = Color.White,                            fontSize = 16.sp                        )                    )                }            }        }    ) { padding ->        Column(            modifier = Modifier                .fillMaxSize()                .padding(padding)                .padding(16.dp),            horizontalAlignment = Alignment.CenterHorizontally,            verticalArrangement = Arrangement.Center        ) {            Text(                text = "Login",                style = MaterialTheme.typography.headlineLarge,                modifier = Modifier.padding(bottom = 32.dp)            )            Box(                modifier = Modifier                    .glassmorphism()                    .padding(16.dp)            ) {                Column(                    horizontalAlignment = Alignment.CenterHorizontally,                    verticalArrangement = Arrangement.Center,                    modifier = Modifier.fillMaxWidth()                ) {                    OutlinedTextField(                        value = email,                        onValueChange = { email = it },                        label = { Text("Email") },                        keyboardOptions = KeyboardOptions.Default.copy(                            imeAction = ImeAction.Next,                            keyboardType = KeyboardType.Email                        ),                        modifier = Modifier.fillMaxWidth(),                        singleLine = true                    )                    Spacer(modifier = Modifier.height(16.dp))                    OutlinedTextField(                        value = password,                        onValueChange = { password = it },                        label = { Text("Password") },                        visualTransformation = PasswordVisualTransformation(),                        keyboardOptions = KeyboardOptions.Default.copy(                            imeAction = ImeAction.Done,                            keyboardType = KeyboardType.Password                        ),                        modifier = Modifier.fillMaxWidth(),                        singleLine = true                    )                    Spacer(modifier = Modifier.height(24.dp))                    Button(                        onClick = { validateLogin() },                        modifier = Modifier.fillMaxWidth()                    ) {                        Text("Login")                    }                    Spacer(modifier = Modifier.height(16.dp))                    Button(                        onClick = { navController.navigate("signup") },                        modifier = Modifier.fillMaxWidth(),                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A5F5))                    ) {                        Text("Sign Up", color = Color.White)                    }                    Spacer(modifier = Modifier.height(16.dp))                    SocialSignInButtons()                }            }        }    }}@Composablefun SocialSignInButtons() {    Row(        modifier = Modifier.fillMaxWidth(),        horizontalArrangement = Arrangement.Center,        verticalAlignment = Alignment.CenterVertically    ) {        IconButton(onClick = { /* Handle Google sign-in */ }) {            Image(painter = painterResource(id = R.drawable.google_logo), contentDescription = "Google SignIn")        }        Spacer(modifier = Modifier.width(16.dp))        IconButton(onClick = { /* Handle Facebook sign-in */ }) {            Image(painter = painterResource(id = R.drawable.facebook_logo), contentDescription = "Facebook SignIn")        }        Spacer(modifier = Modifier.width(16.dp))        IconButton(onClick = { /* Handle Instagram sign-in */ }) {            Image(painter = painterResource(id = R.drawable.instagram_logo), contentDescription = "Instagram SignIn")        }    }}