package com.example.reakageapp.screensimport androidx.compose.animation.core.animateFloatAsStateimport androidx.compose.animation.core.tweenimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport com.example.reakageapp.components.GlassCardimport com.example.reakageapp.theme.AquaLightimport com.example.reakageapp.theme.DeepOceanimport com.example.reakageapp.theme.RippleAccentimport com.example.reakageapp.theme.glassmorphism// Updated data class for user details with imagedata class User(    val name: String,    val email: String,    val phone: String,    val imageResId: Int? = null // Resource ID for user avatar)@Composablefun ProfileScreen(navController: NavController) {    // State for edit mode and user details    var isEditing by remember { mutableStateOf(false) }    var user by remember {        mutableStateOf(            User(                name = "John Doe",                email = "john.doe@example.com",                phone = "123-456-7890",                imageResId = android.R.drawable.ic_menu_gallery // Placeholder; replace with water-themed avatar            )        )    }    var name by remember { mutableStateOf(user.name) }    var email by remember { mutableStateOf(user.email) }    var phone by remember { mutableStateOf(user.phone) }    // Fade-in animation for the GlassCard    val alpha by animateFloatAsState(        targetValue = 1f,        animationSpec = tween(durationMillis = 800),        label = "FadeInAnimation"    )    Box(        modifier = Modifier            .fillMaxSize()            .background(                Brush.linearGradient(                    colors = listOf(AquaLight, RippleAccent, DeepOcean),                    start = androidx.compose.ui.geometry.Offset(0f, 0f),                    end = androidx.compose.ui.geometry.Offset(0f, Float.POSITIVE_INFINITY)                )            )            .padding(16.dp)    ) {        GlassCard(            modifier = Modifier                .fillMaxSize()                .glassmorphism()                .align(Alignment.Center)        ) {            Column(                modifier = Modifier                    .fillMaxSize()                    .padding(32.dp),                horizontalAlignment = Alignment.CenterHorizontally,                verticalArrangement = Arrangement.SpaceBetween            ) {                // Header and Avatar                Column(                    horizontalAlignment = Alignment.CenterHorizontally,                    verticalArrangement = Arrangement.spacedBy(16.dp)                ) {                    // User Image                    Image(                        painter = painterResource(id = user.imageResId ?: android.R.drawable.ic_menu_gallery),                        contentDescription = "User avatar",                        contentScale = ContentScale.Crop,                        modifier = Modifier                            .size(120.dp)                            .clip(CircleShape)                            .border(2.dp, RippleAccent, CircleShape)                            .padding(4.dp)                    )                    Text(                        text = "My Profile",                        style = MaterialTheme.typography.displayMedium.copy(                            color = DeepOcean,                            fontSize = 36.sp,                            textAlign = TextAlign.Center                        ),                        modifier = Modifier.padding(bottom = 16.dp)                    )                }                // User Details                Column(                    verticalArrangement = Arrangement.spacedBy(16.dp),                    modifier = Modifier.fillMaxWidth()                ) {                    if (isEditing) {                        OutlinedTextField(                            value = name,                            onValueChange = { name = it },                            label = { Text("Name") },                            modifier = Modifier.fillMaxWidth(),                            colors = OutlinedTextFieldDefaults.colors(                                focusedBorderColor = RippleAccent,                                unfocusedBorderColor = DeepOcean,                                focusedLabelColor = RippleAccent,                                cursorColor = RippleAccent                            )                        )                        OutlinedTextField(                            value = email,                            onValueChange = { email = it },                            label = { Text("Email") },                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),                            modifier = Modifier.fillMaxWidth(),                            colors = OutlinedTextFieldDefaults.colors(                                focusedBorderColor = RippleAccent,                                unfocusedBorderColor = DeepOcean,                                focusedLabelColor = RippleAccent,                                cursorColor = RippleAccent                            )                        )                        OutlinedTextField(                            value = phone,                            onValueChange = { phone = it },                            label = { Text("Phone") },                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),                            modifier = Modifier.fillMaxWidth(),                            colors = OutlinedTextFieldDefaults.colors(                                focusedBorderColor = RippleAccent,                                unfocusedBorderColor = DeepOcean,                                focusedLabelColor = RippleAccent,                                cursorColor = RippleAccent                            )                        )                    } else {                        Text(                            text = "Name: ${user.name}",                            style = MaterialTheme.typography.bodyLarge.copy(                                color = DeepOcean,                                fontSize = 18.sp                            ),                            modifier = Modifier.fillMaxWidth()                        )                        Text(                            text = "Email: ${user.email}",                            style = MaterialTheme.typography.bodyLarge.copy(                                color = DeepOcean,                                fontSize = 18.sp                            ),                            modifier = Modifier.fillMaxWidth()                        )                        Text(                            text = "Phone: ${user.phone}",                            style = MaterialTheme.typography.bodyLarge.copy(                                color = DeepOcean,                                fontSize = 18.sp                            ),                            modifier = Modifier.fillMaxWidth()                        )                    }                }                // Buttons                Column(                    verticalArrangement = Arrangement.spacedBy(12.dp),                    modifier = Modifier.fillMaxWidth()                ) {                    if (isEditing) {                        Button(                            onClick = {                                user = user.copy(name = name, email = email, phone = phone) // Save changes                                isEditing = false // Exit edit mode                            },                            modifier = Modifier                                .fillMaxWidth()                                .height(56.dp),                            colors = ButtonDefaults.buttonColors(                                containerColor = RippleAccent,                                contentColor = MaterialTheme.colorScheme.onPrimary                            ),                            elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)                        ) {                            Text(                                text = "Save Changes",                                fontSize = 16.sp                            )                        }                    }                    Button(                        onClick = { isEditing = !isEditing },                        modifier = Modifier                            .fillMaxWidth()                            .height(56.dp),                        colors = ButtonDefaults.buttonColors(                            containerColor = DeepOcean,                            contentColor = MaterialTheme.colorScheme.onPrimary                        ),                        elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)                    ) {                        Text(                            text = if (isEditing) "Cancel" else "Update Profile",                            fontSize = 16.sp                        )                    }                    Button(                        onClick = { navController.navigate("login") }, // Navigate to login screen                        modifier = Modifier                            .fillMaxWidth()                            .height(56.dp),                        colors = ButtonDefaults.buttonColors(                            containerColor = AquaLight.copy(alpha = 0.9f), // Slightly translucent for contrast                            contentColor = MaterialTheme.colorScheme.onPrimary                        ),                        elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)                    ) {                        Text(                            text = "Logout",                            fontSize = 16.sp                        )                    }                    Button(                        onClick = { navController.navigate("home") },                        modifier = Modifier                            .fillMaxWidth()                            .height(56.dp),                        colors = ButtonDefaults.buttonColors(                            containerColor = AquaLight,                            contentColor = MaterialTheme.colorScheme.onPrimary                        ),                        elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)                    ) {                        Text(                            text = "Back to Home",                            fontSize = 16.sp                        )                    }                }            }        }    }}