@file:OptIn(ExperimentalMaterial3Api::class)package com.example.reakageapp.screensimport android.net.Uriimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.PickVisualMediaRequestimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.shadowimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport coil.compose.AsyncImageimport com.example.reakageapp.components.GlassCard@Composablefun ReportListScreen(navController: NavController) {    // Mock data for user-submitted reports    val reports = remember {        mutableStateListOf(            Report(                id = "R001",                severity = "High",                area = "Mbeya City Center",                description = "Severe water leakage near the market, causing flooding.",                imageUri = null,                status = "In Progress"            ),            Report(                id = "R002",                severity = "Medium",                area = "Utengule Coffee Farm",                description = "Water quality issue reported, brownish water supply.",                imageUri = null,                status = "Resolved"            ),            Report(                id = "R003",                severity = "Low",                area = "Igawilo Ward",                description = "Minor pipe burst, affecting a few households.",                imageUri = null,                status = "Viewed"            ),            Report(                id = "R004",                severity = "High",                area = "Mbalizi Town",                description = "Contamination detected in the local water tank.",                imageUri = null,                status = "Not Attended"            )        )    }    Box(        modifier = Modifier            .fillMaxSize()            .background(Brush.verticalGradient(listOf(Color(0xFF0D47A1), Color(0xFF42A5F5))))    ) {        GlassCard(            modifier = Modifier                .fillMaxSize()                .align(Alignment.Center)                .padding(16.dp)                .shadow(8.dp, RoundedCornerShape(16.dp))        ) {            Column(                modifier = Modifier                    .padding(24.dp)                    .fillMaxSize(),                horizontalAlignment = Alignment.CenterHorizontally,                verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.Top)            ) {                Text(                    text = "My Submitted Reports",                    style = MaterialTheme.typography.headlineLarge.copy(                        color = Color.White,                        fontWeight = FontWeight.Bold,                        fontSize = 32.sp                    ),                    modifier = Modifier.padding(bottom = 16.dp)                )                LazyColumn(                    modifier = Modifier                        .fillMaxWidth()                        .weight(1f),                    verticalArrangement = Arrangement.spacedBy(12.dp)                ) {                    items(reports) { report ->                        var localSeverity by remember { mutableStateOf(report.severity) }                        var localArea by remember { mutableStateOf(report.area) }                        var localDescription by remember { mutableStateOf(report.description) }                        var localStatus by remember { mutableStateOf(report.status) }                        var localImageUri by remember { mutableStateOf<Uri?>(report.imageUri) }                        var isEditing by remember { mutableStateOf(false) }                        val pickImageLauncher = rememberLauncherForActivityResult(                            contract = ActivityResultContracts.PickVisualMedia()                        ) { uri: Uri? ->                            if (uri != null) {                                localImageUri = uri                            }                        }                        Card(                            modifier = Modifier                                .fillMaxWidth()                                .clip(RoundedCornerShape(12.dp))                                .shadow(4.dp, RoundedCornerShape(12.dp)),                            colors = CardDefaults.cardColors(containerColor = Color.White)                        ) {                            Column(                                modifier = Modifier                                    .padding(16.dp)                                    .fillMaxWidth()                            ) {                                if (isEditing) {                                    var expanded by remember { mutableStateOf(false) }                                    val severities = listOf("Low", "Medium", "High")                                    ExposedDropdownMenuBox(                                        expanded = expanded,                                        onExpandedChange = { expanded = !expanded }                                    ) {                                        OutlinedTextField(                                            value = localSeverity,                                            onValueChange = { localSeverity = it },                                            label = { Text("Severity") },                                            modifier = Modifier                                                .fillMaxWidth()                                                .menuAnchor()                                                .clip(RoundedCornerShape(8.dp)),                                            readOnly = true,                                            colors = TextFieldDefaults.colors(                                                focusedContainerColor = Color.White,                                                unfocusedContainerColor = Color.White,                                                focusedIndicatorColor = Color(0xFF1565C0),                                                unfocusedIndicatorColor = Color(0xFF90CAF9)                                            ),                                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) }                                        )                                        ExposedDropdownMenu(                                            expanded = expanded,                                            onDismissRequest = { expanded = false }                                        ) {                                            severities.forEach { severity ->                                                DropdownMenuItem(                                                    text = { Text(severity) },                                                    onClick = {                                                        localSeverity = severity                                                        expanded = false                                                    }                                                )                                            }                                        }                                    }                                    OutlinedTextField(                                        value = TextFieldValue(localArea),                                        onValueChange = { localArea = it.text },                                        label = { Text("Area") },                                        modifier = Modifier                                            .fillMaxWidth()                                            .padding(top = 8.dp)                                            .clip(RoundedCornerShape(8.dp)),                                        colors = TextFieldDefaults.colors(                                            focusedContainerColor = Color.White,                                            unfocusedContainerColor = Color.White,                                            focusedIndicatorColor = Color(0xFF1565C0),                                            unfocusedIndicatorColor = Color(0xFF90CAF9)                                        )                                    )                                    OutlinedTextField(                                        value = TextFieldValue(localDescription),                                        onValueChange = { localDescription = it.text },                                        label = { Text("Description") },                                        modifier = Modifier                                            .fillMaxWidth()                                            .padding(top = 8.dp)                                            .clip(RoundedCornerShape(8.dp)),                                        colors = TextFieldDefaults.colors(                                            focusedContainerColor = Color.White,                                            unfocusedContainerColor = Color.White,                                            focusedIndicatorColor = Color(0xFF1565C0),                                            unfocusedIndicatorColor = Color(0xFF90CAF9)                                        ),                                        maxLines = 3                                    )                                    Button(                                        onClick = { pickImageLauncher.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly)) },                                        modifier = Modifier                                            .fillMaxWidth()                                            .padding(top = 8.dp)                                            .clip(RoundedCornerShape(8.dp)),                                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1E88E5))                                    ) {                                        Text("Upload Image", color = Color.White, fontSize = 14.sp)                                    }                                    if (localImageUri != null) {                                        AsyncImage(                                            model = localImageUri,                                            contentDescription = "Updated Report Image",                                            modifier = Modifier                                                .fillMaxWidth()                                                .height(150.dp)                                                .clip(RoundedCornerShape(8.dp))                                                .padding(top = 8.dp),                                            contentScale = ContentScale.Crop                                        )                                    }                                    Row(                                        modifier = Modifier                                            .fillMaxWidth()                                            .padding(top = 8.dp),                                        horizontalArrangement = Arrangement.spacedBy(8.dp)                                    ) {                                        Button(                                            onClick = {                                                isEditing = false                                                val index = reports.indexOf(report)                                                if (index != -1) {                                                    reports[index] = report.copy(                                                        severity = localSeverity,                                                        area = localArea,                                                        description = localDescription,                                                        imageUri = localImageUri,                                                        status = localStatus                                                    )                                                }                                            },                                            modifier = Modifier                                                .weight(1f)                                                .clip(RoundedCornerShape(8.dp)),                                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A5F5))                                        ) {                                            Text("Save Changes", color = Color.White, fontSize = 14.sp)                                        }                                        Button(                                            onClick = { isEditing = false },                                            modifier = Modifier                                                .weight(1f)                                                .clip(RoundedCornerShape(8.dp)),                                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF757575))                                        ) {                                            Text("Cancel", color = Color.White, fontSize = 14.sp)                                        }                                    }                                } else {                                    Text(                                        text = "Report ID: ${report.id}",                                        style = MaterialTheme.typography.titleMedium.copy(                                            fontWeight = FontWeight.SemiBold,                                            color = Color(0xFF1565C0)                                        )                                    )                                    Spacer(modifier = Modifier.height(4.dp))                                    Text(                                        text = "Severity: ${report.severity}",                                        style = MaterialTheme.typography.bodyMedium.copy(                                            color = Color.Black.copy(alpha = 0.8f)                                        )                                    )                                    Text(                                        text = "Area: ${report.area}",                                        style = MaterialTheme.typography.bodyMedium.copy(                                            color = Color.Black.copy(alpha = 0.8f)                                        )                                    )                                    Spacer(modifier = Modifier.height(4.dp))                                    Text(                                        text = "Description: ${report.description}",                                        style = MaterialTheme.typography.bodyMedium.copy(                                            color = Color.Black.copy(alpha = 0.7f)                                        )                                    )                                    if (report.imageUri != null) {                                        AsyncImage(                                            model = report.imageUri,                                            contentDescription = "Report Image",                                            modifier = Modifier                                                .fillMaxWidth()                                                .height(150.dp)                                                .clip(RoundedCornerShape(8.dp))                                                .padding(top = 8.dp),                                            contentScale = ContentScale.Crop                                        )                                    }                                    Text(                                        text = "Status: $localStatus",                                        style = MaterialTheme.typography.bodyMedium.copy(                                            color = if (localStatus == "Not Attended") Color.Red else Color.Green                                        ),                                        modifier = Modifier.padding(top = 4.dp)                                    )                                    if (report.status == "Not Attended") {                                        Button(                                            onClick = { isEditing = true },                                            modifier = Modifier                                                .fillMaxWidth()                                                .padding(top = 8.dp)                                                .clip(RoundedCornerShape(8.dp)),                                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1565C0))                                        ) {                                            Text("Edit Report", color = Color.White, fontSize = 14.sp)                                        }                                    }                                }                                if (localStatus != "Resolved" && !isEditing) {                                    Button(                                        onClick = {                                            localStatus = "Not Attended"                                            val index = reports.indexOf(report)                                            if (index != -1) {                                                reports[index] = report.copy(status = localStatus)                                            }                                        },                                        modifier = Modifier                                            .fillMaxWidth()                                            .padding(top = 8.dp)                                            .clip(RoundedCornerShape(8.dp)),                                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1565C0))                                    ) {                                        Text("Update to Not Attended", color = Color.White, fontSize = 14.sp)                                    }                                }                            }                        }                    }                }            }        }    }}// Data class to represent a reportdata class Report(    val id: String,    val severity: String,    val area: String,    val description: String,    val imageUri: Uri?,    val status: String)