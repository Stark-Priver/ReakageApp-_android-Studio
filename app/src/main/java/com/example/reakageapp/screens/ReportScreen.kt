package com.example.reakageapp.screensimport android.net.Uriimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.PickVisualMediaRequestimport androidx.activity.result.contract.ActivityResultContractsimport androidx.activity.result.contract.ActivityResultContracts.TakePictureimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.core.content.FileProviderimport androidx.navigation.NavControllerimport coil.compose.rememberImagePainterimport com.example.reakageapp.components.GlassCardimport java.io.Fileimport java.text.SimpleDateFormatimport java.util.*@OptIn(ExperimentalMaterial3Api::class)@Composablefun ReportScreen(navController: NavController) {    val context = LocalContext.current    var description by remember { mutableStateOf(TextFieldValue()) }    var location by remember { mutableStateOf(TextFieldValue()) }    var issueType by remember { mutableStateOf("Select Issue Type") }    val issueTypes = listOf("Leakage", "Water Quality Issue", "Contamination", "Other")    // Dropdown state    var expanded by remember { mutableStateOf(false) }    // Uri for captured image by camera    var cameraImageUri by remember { mutableStateOf<Uri?>(null) }    // Uri for selected image from gallery    var galleryImageUri by remember { mutableStateOf<Uri?>(null) }    // Launcher for picking an image from gallery (single image)    val pickImageLauncher = rememberLauncherForActivityResult(        contract = ActivityResultContracts.PickVisualMedia()    ) { uri: Uri? ->        if (uri != null) {            galleryImageUri = uri            cameraImageUri = null // clear camera image to show only one at a time        }    }    // Create file for camera photo capture    fun createImageFile(): File {        val timeStamp: String = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(Date())        val storageDir: File = context.cacheDir        return File.createTempFile(            "JPEG_${timeStamp}_",            ".jpg",            storageDir        )    }    // Launcher for taking picture via camera    val takePictureLauncher = rememberLauncherForActivityResult(        contract = TakePicture()    ) { success: Boolean ->        if (success) {            galleryImageUri = null // clear gallery image to show only one image at a time        } else {            // If failed, clear camera image uri            cameraImageUri = null        }    }    // Prepare to launch camera intent with a Uri    fun launchCamera() {        val photoFile = createImageFile()        val photoUri = FileProvider.getUriForFile(            context,            context.packageName + ".fileprovider",            photoFile        )        cameraImageUri = photoUri        takePictureLauncher.launch(photoUri)    }    Box(        modifier = Modifier            .fillMaxSize()            .background(                Brush.verticalGradient(                    colors = listOf(Color(0xFF0D47A1), Color(0xFF42A5F5))                )            )            .padding(24.dp)    ) {        GlassCard(            modifier = Modifier                .fillMaxWidth()                .align(Alignment.Center)                .padding(16.dp)        ) {            Column(                modifier = Modifier                    .padding(24.dp)                    .fillMaxWidth(),                horizontalAlignment = Alignment.CenterHorizontally,                verticalArrangement = Arrangement.spacedBy(16.dp),            ) {                Text(                    text = "Report Water Issue",                    style = MaterialTheme.typography.headlineLarge.copy(                        color = Color.White,                        fontWeight = FontWeight.ExtraBold,                        fontSize = 28.sp                    )                )                TextField(                    value = description,                    onValueChange = { description = it },                    label = { Text("Description of the Problem") },                    modifier = Modifier.fillMaxWidth(),                    colors = TextFieldDefaults.textFieldColors(containerColor = Color.White)                )                TextField(                    value = location,                    onValueChange = { location = it },                    label = { Text("Location (e.g., Street Name, Area)") },                    modifier = Modifier.fillMaxWidth(),                    colors = TextFieldDefaults.textFieldColors(containerColor = Color.White)                )                ExposedDropdownMenuBox(                    expanded = expanded,                    onExpandedChange = { expanded = !expanded }                ) {                    TextField(                        readOnly = true,                        value = issueType,                        onValueChange = {},                        label = { Text("Type of Issue") },                        modifier = Modifier.fillMaxWidth(),                        colors = TextFieldDefaults.textFieldColors(containerColor = Color.White),                        trailingIcon = {                            Icon(                                painter = painterResource(id = android.R.drawable.arrow_down_float),                                contentDescription = "Dropdown Icon"                            )                        }                    )                    ExposedDropdownMenu(                        expanded = expanded,                        onDismissRequest = { expanded = false }                    ) {                        issueTypes.forEach { type ->                            DropdownMenuItem(                                text = { Text(type) },                                onClick = {                                    issueType = type                                    expanded = false                                }                            )                        }                    }                }                Row(                    modifier = Modifier.fillMaxWidth(),                    horizontalArrangement = Arrangement.spacedBy(16.dp)                ) {                    Button(                        onClick = {                            // Launch gallery picker                            pickImageLauncher.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly))                        },                        modifier = Modifier.weight(1f),                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1E88E5))                    ) {                        Text("Select Image")                    }                    Button(                        onClick = {                            // Launch camera capture                            launchCamera()                        },                        modifier = Modifier.weight(1f),                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1565C0))                    ) {                        Text("Capture Image")                    }                }                // Show selected or captured image preview                val imageToShow = cameraImageUri ?: galleryImageUri                imageToShow?.let { uri ->                    Image(                        painter = rememberImagePainter(uri),                        contentDescription = "Selected Image",                        modifier = Modifier                            .height(200.dp)                            .fillMaxWidth()                    )                }                Button(                    onClick = {                        // Currently no backend submission; just clear form or show a snackbar etc.                        description = TextFieldValue()                        location = TextFieldValue()                        issueType = "Select Issue Type"                        galleryImageUri = null                        cameraImageUri = null                    },                    modifier = Modifier.fillMaxWidth(),                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A5F5))                ) {                    Text("Submit Report")                }            }        }    }}