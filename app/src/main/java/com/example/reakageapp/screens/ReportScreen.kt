package com.example.reakageapp.screensimport android.Manifestimport android.content.Contextimport android.location.Geocoderimport android.net.Uriimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.PickVisualMediaRequestimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.draw.shadowimport androidx.compose.ui.graphics.Brushimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport coil.compose.AsyncImageimport com.example.reakageapp.components.GlassCardimport com.google.accompanist.permissions.ExperimentalPermissionsApiimport com.google.accompanist.permissions.isGrantedimport com.google.accompanist.permissions.rememberPermissionStateimport com.google.android.gms.location.LocationServicesimport kotlinx.coroutines.launchimport java.util.*@OptIn(ExperimentalMaterial3Api::class, ExperimentalPermissionsApi::class)@Composablefun ReportScreen(navController: NavController) {    var description by remember { mutableStateOf(TextFieldValue()) }    var area by remember { mutableStateOf(TextFieldValue()) }    var problemSeverity by remember { mutableStateOf("Medium") }    var expanded by remember { mutableStateOf(false) }    var imageUri by remember { mutableStateOf<Uri?>(null) }    var errorMessage by remember { mutableStateOf<String?>(null) }    val severities = listOf("Low", "Medium", "High")    val snackbarHostState = remember { SnackbarHostState() }    val coroutineScope = rememberCoroutineScope()    val context = LocalContext.current    // Location Permission Handling    val locationPermissionState = rememberPermissionState(Manifest.permission.ACCESS_FINE_LOCATION)    val fusedLocationClient = remember { LocationServices.getFusedLocationProviderClient(context) }    // Fetch location automatically    fun fetchLocation() {        if (locationPermissionState.status.isGranted) {            try {                fusedLocationClient.lastLocation.addOnSuccessListener { location ->                    if (location != null) {                        val geocoder = Geocoder(context, Locale.getDefault())                        val addresses = geocoder.getFromLocation(location.latitude, location.longitude, 1)                        if (addresses != null && addresses.isNotEmpty()) {                            val address = addresses[0]                            val areaText = address.getAddressLine(0) ?: "Unknown Area"                            area = TextFieldValue(areaText)                        } else {                            errorMessage = "Unable to fetch location address"                        }                    } else {                        errorMessage = "Location not available"                    }                }.addOnFailureListener {                    errorMessage = "Failed to fetch location: ${it.message}"                }            } catch (e: SecurityException) {                errorMessage = "Location permission denied"            }        } else {            locationPermissionState.launchPermissionRequest()        }    }    // Show snackbar when errorMessage changes    LaunchedEffect(errorMessage) {        errorMessage?.let {            coroutineScope.launch {                snackbarHostState.showSnackbar(it)                errorMessage = null // Clear after showing            }        }    }    val pickImageLauncher = rememberLauncherForActivityResult(        contract = ActivityResultContracts.PickVisualMedia()    ) { uri: Uri? ->        if (uri != null) {            imageUri = uri        }    }    fun validateAndSubmit() {        if (description.text.isBlank() || area.text.isBlank()) {            errorMessage = "Please fill the description and area"            return        }        // Simulate submission (replace with actual backend call)        errorMessage = "Report submitted successfully"        description = TextFieldValue()        area = TextFieldValue()        imageUri = null    }    Scaffold(        modifier = Modifier.fillMaxSize(),        snackbarHost = {            SnackbarHost(                hostState = snackbarHostState,                modifier = Modifier.padding(16.dp)            ) { data ->                Snackbar(                    modifier = Modifier.padding(8.dp),                    containerColor = Color(0xFF1565C0),                    contentColor = Color.White                ) {                    Text(                        text = data.visuals.message,                        style = MaterialTheme.typography.bodyMedium.copy(                            color = Color.White,                            fontSize = 16.sp                        )                    )                }            }        }    ) { padding ->        Box(            modifier = Modifier                .fillMaxSize()                .background(Brush.verticalGradient(listOf(Color(0xFF0D47A1), Color(0xFF42A5F5))))                .padding(padding)        ) {            GlassCard(                modifier = Modifier                    .fillMaxSize()                    .align(Alignment.Center)                    .padding(16.dp)                    .shadow(8.dp, RoundedCornerShape(16.dp))            ) {                Column(                    modifier = Modifier                        .padding(24.dp)                        .fillMaxSize(),                    horizontalAlignment = Alignment.CenterHorizontally,                    verticalArrangement = Arrangement.spacedBy(20.dp, Alignment.Top)                ) {                    Text(                        text = "Report Water Problem",                        style = MaterialTheme.typography.headlineLarge.copy(                            color = Color.White,                            fontWeight = FontWeight.Bold,                            fontSize = 32.sp                        ),                        modifier = Modifier.padding(bottom = 8.dp)                    )                    ExposedDropdownMenuBox(                        expanded = expanded,                        onExpandedChange = { expanded = !expanded }                    ) {                        OutlinedTextField(                            readOnly = true,                            value = problemSeverity,                            onValueChange = {},                            label = { Text("Problem Severity", color = Color.Black.copy(alpha = 0.7f)) },                            modifier = Modifier                                .fillMaxWidth()                                .menuAnchor()                                .clip(RoundedCornerShape(12.dp)),                            colors = TextFieldDefaults.colors(                                focusedContainerColor = Color.White,                                unfocusedContainerColor = Color.White,                                focusedIndicatorColor = Color(0xFF1565C0),                                unfocusedIndicatorColor = Color(0xFF90CAF9),                                focusedLabelColor = Color(0xFF1565C0),                                cursorColor = Color(0xFF1565C0)                            ),                            trailingIcon = {                                ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)                            }                        )                        ExposedDropdownMenu(                            expanded = expanded,                            onDismissRequest = { expanded = false }                        ) {                            severities.forEach { severity ->                                DropdownMenuItem(                                    text = { Text(severity) },                                    onClick = {                                        problemSeverity = severity                                        expanded = false                                    },                                    contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding                                )                            }                        }                    }                    Row(                        modifier = Modifier.fillMaxWidth(),                        verticalAlignment = Alignment.CenterVertically,                        horizontalArrangement = Arrangement.spacedBy(12.dp)                    ) {                        OutlinedTextField(                            value = area,                            onValueChange = { area = it },                            label = { Text("Area (e.g., Street, Neighborhood)", color = Color.Black.copy(alpha = 0.7f)) },                            modifier = Modifier                                .weight(1f)                                .clip(RoundedCornerShape(12.dp)),                            colors = TextFieldDefaults.colors(                                focusedContainerColor = Color.White,                                unfocusedContainerColor = Color.White,                                focusedIndicatorColor = Color(0xFF1565C0),                                unfocusedIndicatorColor = Color(0xFF90CAF9),                                focusedLabelColor = Color(0xFF1565C0),                                cursorColor = Color(0xFF1565C0)                            )                        )                        Button(                            onClick = { fetchLocation() },                            modifier = Modifier                                .height(48.dp)                                .clip(RoundedCornerShape(12.dp)),                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1E88E5))                        ) {                            Text(                                text = "Auto",                                fontSize = 14.sp,                                fontWeight = FontWeight.Medium,                                color = Color.White                            )                        }                    }                    OutlinedTextField(                        value = description,                        onValueChange = { description = it },                        label = { Text("Description", color = Color.Black.copy(alpha = 0.7f)) },                        modifier = Modifier                            .fillMaxWidth()                            .weight(1f)                            .clip(RoundedCornerShape(12.dp)),                        colors = TextFieldDefaults.colors(                            focusedContainerColor = Color.White,                            unfocusedContainerColor = Color.White,                            focusedIndicatorColor = Color(0xFF1565C0),                            unfocusedIndicatorColor = Color(0xFF90CAF9),                            focusedLabelColor = Color(0xFF1565C0),                            cursorColor = Color(0xFF1565C0)                        ),                        maxLines = 4                    )                    Column(                        modifier = Modifier.fillMaxWidth(),                        horizontalAlignment = Alignment.CenterHorizontally                    ) {                        Button(                            onClick = { pickImageLauncher.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageOnly)) },                            modifier = Modifier                                .fillMaxWidth()                                .height(48.dp)                                .clip(RoundedCornerShape(12.dp)),                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1E88E5))                        ) {                            Text(                                text = "Upload Photo",                                fontSize = 16.sp,                                fontWeight = FontWeight.Medium,                                color = Color.White                            )                        }                        Spacer(modifier = Modifier.height(12.dp))                        if (imageUri == null) {                            Box(                                modifier = Modifier                                    .fillMaxWidth()                                    .height(200.dp)                                    .clip(RoundedCornerShape(12.dp))                                    .background(Color.White.copy(alpha = 0.9f))                                    .border(1.dp, Color(0xFF90CAF9), RoundedCornerShape(12.dp)),                                contentAlignment = Alignment.Center                            ) {                                Text(                                    text = "No Image Selected",                                    color = Color.Gray,                                    fontSize = 14.sp                                )                            }                        } else {                            AsyncImage(                                model = imageUri,                                contentDescription = "Uploaded Image",                                modifier = Modifier                                    .fillMaxWidth()                                    .height(200.dp)                                    .clip(RoundedCornerShape(12.dp))                                    .background(Color.White)                                    .border(1.dp, Color(0xFF1565C0), RoundedCornerShape(12.dp))                                    .shadow(4.dp, RoundedCornerShape(12.dp)),                                contentScale = ContentScale.Crop                            )                        }                    }                    Button(                        onClick = { validateAndSubmit() },                        modifier = Modifier                            .fillMaxWidth()                            .height(56.dp)                            .clip(RoundedCornerShape(12.dp)),                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF42A5F5)),                        elevation = ButtonDefaults.buttonElevation(defaultElevation = 8.dp)                    ) {                        Text(                            text = "Submit Report",                            fontSize = 18.sp,                            fontWeight = FontWeight.SemiBold,                            color = Color.White                        )                    }                }            }        }    }}